#include <iostream>
using std::cout;
using std::endl;
/**
 * int max(int a, int b){
 *  return (a>b)?a:b};
 * }
 * 
 * double max(double a,double){
 *  return (a>b)?a:b;
 * }
 * 
 * string max(string a,string){
 *  return (a>b)?a:b; 
 *  }
 * 
 * 
 */

//template <typename T>
//T maximum(T a,T b){
 //   return (a>b)?a:b;
//}

template <typename T> T maximum(T a,T b);
using std::string;
int main(int argc,char **argv){
    
    int a{10};
    int b{23};

    double c{34.2};
    double d{23.4};

    string e{"hello"};
    string f{"world"};


    cout<<"Integer fxn:"<<maximum(a,b)<<endl;
    cout<<"Double fxn:"<<maximum(c,d)<<endl;
    cout<<"String fxn:"<<maximum(e,f)<<endl;

    //The real C++ fxn generated by the compiler is called a template instance.
    //A template instance will be reused when a similar fxn call is issued.
    //No duplicates are generated by the compiler.
    //bad to use template for pointers
    
    return 0;
}

template<typename T> T maximum(T a,T b){
    return (a>b)?a:b;//This should be suportive for all types you are going to supplied
}

